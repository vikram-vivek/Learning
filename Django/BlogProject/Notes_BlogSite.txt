My Blog Site Django Notes

==========================
Blog_Clone_Project_Part_01
==========================
##Creating Virutal Env
conda create -n MyBlogSiteEnv python=3.6 django=1.11

##Activate env
activate MyBlogSiteEnv

##Start Project
django-admin startproject mysite

##Start App
django-admin startapp blog

##Create 2 files under blog folder
urls.py and forms.py

##Register the app blog in the settings.py of mysite

##python manage.py migrate

##python manage.py makemigrations blog

##python manage.py runserver

==========================
Blog_Clone_Project_Part_02
==========================

Creating the blog models
Post
    Fields - author, title, text, creation_date, published_date
    Methods - publish, approve_comments, get_absolute_url, __str__
Comment
    Fields - post, author, text, creation_date, approve_comment
    Methods - approve, get_absolute_url, __str__

==========================
Blog_Clone_Project_Part_03
==========================

Creating Forms
PostForm
CommentForm

Note added widgets in Meta() to alter the css

Create static folder in blog app folder
static -> css and js subfolders
This is done to make the app more 'plug n play'

Update the setting.py file
Add the STATIC_ROOT

Create templates folder in blog app
templates -> blog and registration subfolders used for CBV

Update the setting.py file
Add the TEMPLATES_DIR, LOGIN_REDIRECT_URL
Add the TEMPLATES_DIR in the list TEMPLATES

==========================
Blog_Clone_Project_Part_04
==========================

Adding views
Link blog->urls.py to main mysite->urls.py
AboutView -> created a class in views.py with TemplateView, added a url in urls.py, created a html file about.html
PostListView -> created a class with ListView, added the model Post and override custom filter get_quesryset to return latest post first using published_date__lte, added the url
PostDetailView -> using DetailView, linked to model Post, created a url post/(?P<pk>\d+)$
CreatePostView -> used LoginRequiredMixin and CreateView, linked the login_url and redirect_field_name then form_class and model
UpdatePostView -> used LoginRequiredMixin and UpdateView, linked the login_url and redirect_field_name then form_class and model
DeletePostView -> used LoginRequiredMixin and DeleteView, used reverse_lazy to go to post_list
DraftListView -> used LoginRequiredMixin and ListView, to filter all Post objects which have published_date__isnull=True and order_by created_date

==========================
Blog_Clone_Project_Part_05
==========================

Create empty html files-
templates->blog->post_list.html, post_draft_list.html, post_form.html, post_detail.html,post_confirm_delete.html,comment_form.html
registration->login.html

Added views-
post_publish, add_comment_to_post, comment_approve, comment_remove

Added urls corresponding to views
