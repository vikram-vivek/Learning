
# Two Number Sum Write a function that takes in a non-empty array of 
# distinct integers and an integer representing a target sum. If any
# two numbers in the input array sum up to the target sum, the 
# function should return them in an array, in sorted order. If no 
# two numbers sum up to the target sum, the function should return 
# an empty array. Assume that there will be at most one pair of 
# numbers summing up to the target sum. 
# 
# Sample input: [3, 5, -4, 8, 11, 1, -1, 6], 10 
# Sample output: [-1, 11]

# Optimized solution will be 
# Time Complexity O(n)
# Space Complexity O(n)
# where n isthe length of the input array


# Not a optimized solution
def twoNumberSum(array, targetSum):
    # Write your code here.
    l = len(array)
    sol = []
    for i in range(l):
        tmp_arr = array.copy()
        del tmp_arr[i]
        rem = targetSum - array[i]
        new_array = tmp_arr
        if rem in new_array:
            sol.append(array[i])
    sol.sort()
    return sol

# Three Solutions
# 1) Two Loops - one for iterating through the each element another loop 
#                checking the remaining elements for the remainder sum
# 2) Using Hashing - In python use dictionary to achieve O(1) for searching 
#                    the already visited element. After match return the answer
# 3) Sort and converge - Sort the Array then start with left most and right most
#                        element compare their sum and based on < or > or = make 
#                        changes in the left and right index. This is slightly 
#                        better than Two loops solution

# Using dictionary the solution will be the optimal one.

###################################
# Test Cases
# Add, edit, or remove tests in this file.
# Treat it as your playground!

import program
import unittest


class TestProgram(unittest.TestCase):
	
	def test_case_1(self):
		self.assertEqual(program.twoNumberSum([4, 6], 10), [4, 6])
	
	def test_case_2(self):
		self.assertEqual(program.twoNumberSum([4, 6, 1], 5), [1, 4])
	
	def test_case_3(self):
		self.assertEqual(program.twoNumberSum([4, 6, 1, -3], 3), [-3, 6])
	
	def test_case_4(self):
		self.assertEqual(program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10), [-1, 11])
	
	def test_case_5(self):
		self.assertEqual(program.twoNumberSum([1, 2, 3, 4, 5, 6, 7, 8, 9], 17), [8, 9])
	
	def test_case_6(self):
		self.assertEqual(program.twoNumberSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 15], 18), [3, 15])
	
	def test_case_7(self):
		self.assertEqual(program.twoNumberSum([-7, -5, -3, -1, 0, 1, 3, 5, 7], -5), [-5, 0])
	
	def test_case_8(self):
		self.assertEqual(program.twoNumberSum([-21, 301, 12, 4, 65, 56, 210, 356, 9, -47], 163), [-47, 210])
	
	def test_case_9(self):
		self.assertEqual(program.twoNumberSum([-21, 301, 12, 4, 65, 56, 210, 356, 9, -47], 164), [])
	
	def test_case_10(self):
		self.assertEqual(program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 15), [])
	

if __name__ == "__main__":
	unittest.main()
#########################
